{"version":3,"sources":["dispatcher/todos.dispatcher.js","stores/todos.store.js","actions/todo.actions.js","components/layout.jsx","App.js","serviceWorker.js","index.js"],"names":["todos_dispatcher","Dispatcher","todoStore","_EventEmitter","TodoStore","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","todos","name","id","completed","inherits","createClass","key","value","payload","Date","now","push","detectChange","filter","todo","emit","type","addTodo","deleteTodo","EventEmitter","dispatcher","register","handleActions","bind","todoActions","TodoActions","dispatch","Layout","props","state","getAllTodos","addValue","_this2","on","setState","e","target","deleteId","_this3","elem","map","react_default","a","createElement","onClick","className","placeholder","onChange","handleChange","React","Component","App","layout_Layout","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.822fdb7a.chunk.js","sourcesContent":["import { Dispatcher } from 'flux';\r\n\r\nexport default new Dispatcher();","\r\nimport { EventEmitter } from 'events';\r\nimport dispatcher from '../dispatcher/todos.dispatcher';\r\n\r\nexport class TodoStore extends EventEmitter {\r\n\r\n    constructor() {\r\n        super();\r\n        this.todos = [\r\n            {\r\n                name: \"Wakeup\",\r\n                id: \"1\",\r\n                completed: false\r\n            },\r\n            {\r\n                name: \"Take Bath\",\r\n                id: \"2\",\r\n                completed: false\r\n            },\r\n            {\r\n                name: \"Wear good clothes\",\r\n                id: \"3\",\r\n                completed: false\r\n            }\r\n        ]\r\n    }\r\n\r\n    getAllTodos() {\r\n        return this.todos;\r\n    }\r\n\r\n\r\n    addTodo(payload) {\r\n        const id = Date.now();\r\n        this.todos.push({\r\n            name: payload.name,\r\n            id,\r\n            completed: payload.completed\r\n        });\r\n        this.detectChange();\r\n    }\r\n\r\n    deleteTodo(payload){\r\n        this.todos = this.todos.filter((todo)=> todo.id !== payload.id);\r\n        this.detectChange();\r\n    }\r\n\r\n    detectChange() {\r\n        todoStore.emit('change');\r\n    }\r\n\r\n    handleActions(payload) {\r\n        switch (payload.type) {\r\n            case 'CREATE_TODO': {\r\n                this.addTodo(payload);\r\n                break;\r\n            }\r\n            case 'DELETE_TODO': {\r\n                this.deleteTodo(payload);\r\n                break;\r\n            }\r\n            default: {\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n\r\nconst todoStore = new TodoStore();\r\ndispatcher.register(todoStore.handleActions.bind(todoStore));\r\nexport default todoStore;\r\n\r\n","\r\n\r\nimport dispatcher from '../dispatcher/todos.dispatcher';\r\nexport class TodoActions {\r\n    addTodo(name){\r\n        var payload = {\r\n            type:'CREATE_TODO',\r\n            name,\r\n            completed:false\r\n        }\r\n        dispatcher.dispatch(payload);\r\n    }\r\n\r\n    deleteTodo(id){\r\n        var payload = {\r\n            type: 'DELETE_TODO',\r\n            id\r\n        }\r\n        dispatcher.dispatch(payload);\r\n    }\r\n}\r\n\r\nconst todoActions = new TodoActions();\r\nexport default todoActions;","\r\nimport React from 'react';\r\nimport todoStore from '../stores/todos.store';\r\n\r\nimport todoActions from '../actions/todo.actions';\r\nimport './layout.css'\r\n\r\nexport default class Layout extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            todos: todoStore.getAllTodos(),\r\n            addValue:\"\"\r\n        }\r\n    }\r\n\r\n\r\n    componentDidMount() {\r\n        todoStore.on('change',()=>{\r\n            this.setState({todos:todoStore.getAllTodos()});\r\n        })\r\n    }\r\n\r\n    handleChange(e) {\r\n        this.setState({addValue:e.target.value});\r\n    }\r\n\r\n    addTodo(){\r\n        todoActions.addTodo(this.state.addValue);\r\n    }\r\n\r\n    deleteTodo(deleteId){\r\n        todoActions.deleteTodo(deleteId)\r\n    }\r\n\r\n    render() {\r\n        const elem = this.state.todos.map((todo) => <li key={todo.id}><b>Id: </b>{todo.id} <b>Name: </b> {todo.name}  <span onClick={this.deleteTodo.bind(this, todo.id)}> X </span></li>)\r\n        return (\r\n            <div>\r\n                <h3>List of Todos</h3>\r\n                <ul>\r\n                    {elem}\r\n                </ul>\r\n\r\n                <div className=\"input\">\r\n                    <input type=\"text\" placeholder=\"Enter New Todo\" onChange={this.handleChange.bind(this)}/>\r\n                    <button type=\"button\"  onClick={this.addTodo.bind(this)}> Add Todo </button>\r\n                </div>\r\n\r\n            </div>\r\n        )\r\n    }\r\n}","import React, { Component } from 'react';\n\nimport './App.css';\nimport Layout from './components/layout';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"title\">\n        <Layout />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}